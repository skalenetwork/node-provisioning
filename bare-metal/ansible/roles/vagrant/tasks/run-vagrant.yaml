- name: Install dependencies
  apt: name="{{ item }}" state=latest update_cache=yes force_apt_get=yes
  loop: ["virtualbox", "vagrant"]
  become: true
  tags: apt

- name: Blacklist kvm
  lineinfile:
    path: /etc/modprobe.d/blacklist.conf
    state: present
    insertafter: EOF
    line: "blacklist kvm-intel"
  become: true

- name: Set datadir base folder
  set_fact:
    disk_dir="{{ base_path }}/disks"
  tags:
    - setup
    - destroy
    - mount

- name: Ensure base dir and disk dir
  file:
    path: "{{ item }}"
    state: directory
  loop: ["{{ base_path }}", "{{ disk_dir }}"]

- name: Mount block device
  mount:
    path: "{{ disk_dir }}"
    src: "{{ block_device }}"
    opts: "rw"
    state: mounted
    fstype: ext4
  become: true
  when: block_device is defined
  tags: mount

- name: Switch user
  file:
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"
    path: "{{ disk_dir }}"
  become: true
  tags: mount

- name: Synchronization of vagrant folder
  synchronize:
    src: "{{ inventory_dir }}/../../vagrant"
    dest: "{{ base_path }}"
  tags: sync

- name: Copy public SSH key to the server
  copy:
    src: "~/.ssh/id_rsa.pub"
    dest: "{{ base_path }}/vagrant"

- name:  Destroy previous Vagrant instances
  environment:
    NUM_OF_VMS: "{{ num_of_vms }}"
    BASE_PATH: "{{ base_path }}"
    SUBNET: "{{ subnet }}"
    DISK_SIZE: "{{ disk_size }}"
    BASE_IP: "{{ base_ip }}"
    RAM_SIZE: "{{ ram_size }}"
    CPUS: "{{ cpus }}"
    VM_BASE_NAME: "{{ vm_base_name }}"
    VAGRANT_DEFAULT_PROVIDER: virtualbox
    VAGRANT_EXPERIMENTAL: disks
    BASE_DISK_PATH: "{{ disk_dir }}"
  command:
    chdir: "{{ base_path }}/vagrant/"
    cmd: "vagrant destroy -f"
  tags: destroy

- name: Find old .vdi files
  find:
    paths:
      - "{{ base_path }}/vagrant"
    patterns: "*.vdi"
  register: find_results
  tags: destroy

- name: Remove old .vdi files
  file:
    path: "{{ item['path'] }}"
    state: absent
  with_items: "{{ find_results['files'] }}"
  tags: destroy

- name: Stop service restart_vm on host, if running
  become: yes
  ansible.builtin.systemd:
    name: restart_vm
    state: stopped
  tags: destroy
  when: ansible_facts.services['restart_vm'] is defined

- name: Remove restart_vm.service file
  become: yes
  ansible.builtin.file:
    path: "/etc/systemd/system/restart_vm.service"
    state: absent
  tags: destroy
  when: ansible_facts.services['restart_vm'] is defined

- name: Remove restart_vm.sh file
  ansible.builtin.file:
    path: "{{ base_path }}/restart_vm.sh"
    state: absent
  tags: destroy
  when: ansible_facts.services['restart_vm'] is defined

- name: Set env options sync node
  set_fact:
    env_options: |
      NUM_OF_VMS="{{ num_of_vms }}"
      BASE_PATH="{{ base_path }}"
      SUBNET="{{ subnet }}"
      DISK_SIZE="{{ disk_size }}"
      BASE_IP="{{ base_ip }}"
      RAM_SIZE="{{ ram_size }}"
      CPUS="{{ cpus }}"
      VM_BASE_NAME="{{ vm_base_name }}"
      VAGRANT_DEFAULT_PROVIDER=virtualbox
      VAGRANT_EXPERIMENTAL=disks
      BASE_DISK_PATH="{{ disk_dir }}"

- name: Save .env file
  copy:
    content: "{{ env_options }}"
    dest: "{{ base_path }}/vagrant/.env"

- name:  Vagrant up
  environment:
    NUM_OF_VMS: "{{ num_of_vms }}"
    BASE_PATH: "{{ base_path }}"
    SUBNET: "{{ subnet }}"
    DISK_SIZE: "{{ disk_size }}"
    BASE_IP: "{{ base_ip }}"
    RAM_SIZE: "{{ ram_size }}"
    CPUS: "{{ cpus }}"
    VM_BASE_NAME: "{{ vm_base_name }}"
    VAGRANT_DEFAULT_PROVIDER: virtualbox
    VAGRANT_EXPERIMENTAL: disks
    BASE_DISK_PATH: "{{ disk_dir }}"
  command:
    chdir: "{{ base_path }}/vagrant/"
    cmd: "vagrant up --provider=virtualbox"
  tags: up
