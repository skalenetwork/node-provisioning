# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'fileutils'


def number_or_nil(string)
  Integer(string || '')
rescue ArgumentError
  nil
end


VAGRANTFILE_API_VERSION = "2"
BASE_PATH = ENV['BASE_PATH']
PUB_KEY_PATH = "#{BASE_PATH}/vagrant/id_rsa.pub"
SUBNET = ENV['SUBNET'] # ex: "192.168.2"
NUM_OF_VMS = number_or_nil(ENV['NUM_OF_VMS'])
DISK_SIZE = number_or_nil(ENV['DISK_SIZE'])
RAM_SIZE = number_or_nil(ENV['RAM_SIZE'])
CPUS = number_or_nil(ENV['CPUS'])
VM_BASE_NAME = ENV['VM_BASE_NAME']
BASE_IP = number_or_nil(ENV['BASE_IP'])


Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
    config.vm.box = "ubuntu/focal64"
    config.vm.disk :disk, size: "100GB", primary: true
    config.vm.disk :disk, size: "10GB", name: "datadir"

    (0..NUM_OF_VMS - 1).each do |i|
        config.vm.define "node-#{i}" do |node|
            node.vm.network "public_network", bridge: "eno1", ip: "#{SUBNET}.#{BASE_IP+i}"
            node.vm.network :forwarded_port, guest: 22, host: 2222, host_ip: "0.0.0.0", id: "ssh", auto_correct: true, bridge: "eno1"
            node.vm.provision "shell" do |s|
                ssh_pub_key = ""
                if File.file?(PUB_KEY_PATH)
                  ssh_pub_key = File.readlines(PUB_KEY_PATH).first.strip
                else
                  puts "No SSH key found. You will need to remedy this before pushing to the repository."
                end
                s.inline = <<-SHELL
                  if grep -sq "#{ssh_pub_key}" /home/vagrant/.ssh/authorized_keys; then
                    echo "SSH keys already provisioned."
                    exit 0;
                  fi
                  echo "SSH key provisioning."
                  mkdir -p /home/vagrant/.ssh/
                  touch /home/vagrant/.ssh/authorized_keys
                  echo #{ssh_pub_key} >> /home/vagrant/.ssh/authorized_keys
                  echo #{ssh_pub_key} > /home/vagrant/.ssh/id_rsa.pub
                  chmod 644 /home/vagrant/.ssh/id_rsa.pub
                  chown -R vagrant:vagrant /home/vagrant
                  exit 0
                SHELL
            end
            node.vm.provider "virtualbox" do |v|
              v.memory = RAM_SIZE
              v.cpus = CPUS
              v.name = "#{VM_BASE_NAME}-#{i}"
              v.gui = false
           end
       end
    end
end
